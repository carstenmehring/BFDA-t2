% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1-Simulation.R
\name{BFDA.sim.ttest}
\alias{BFDA.sim.ttest}
\title{Simulate ... TODO}
\usage{
BFDA.sim.ttest(d, n.min = 10, n.max = 500, design = "sequential",
  boundary = Inf, B = 1000, stepsize = NA,
  alternative = c("directional", "undirected"), verbose = TRUE, cores = 1,
  ETA = TRUE, ...)
}
\arguments{
\item{d}{The assumed true effect size. This can be a single number (this leads to a fixed assumed effect size, as in a classical power analysis) or a vector of numbers (e.g., \code{rnorm(100000, 0.5, 0.1)}). If it is a vector, the sampler draws a new effect size at each step. Hence, the provided distribution represents the uncertainty about the true effect size.}

\item{n.min}{Minimum n before optional stopping is started}

\item{n.max}{Maximum n - if that is reached without hitting a boundary, the run is aborted}

\item{design}{"fixed.n" or "sequential". If design=="fixed.n", \code{n.min} and \code{boundary} are irrelevant, and all samples are drawn with n=n.max.}

\item{boundary}{The Bayes factor (resp. its reciprocal) where the run is stopped as well. For a fixed-n design, set it to Inf}

\item{B}{Number of bootstrap samples (should be dividable by getDoParWorkers())}

\item{stepsize}{The number with which participants are added to the sample. If NA, the sample is increased +1 until it's 100, and +10 from that size on.}

\item{alternative}{One of c("directional", "undirected") for directed (one-sided) or undirected (two-sided) hypothesis tests.}

\item{verbose}{Show output about progress?}

\item{cores}{number of parallel processes. If cores==1, no parallel framework is used.}

\item{ETA}{Compute an estimate of the full simulation time? This adds some overhead to the simulation, so turn off for actual simulations.}

\item{...}{Further parameters passed to the BF function}
}
\description{
Simulate ... TODO
}
\examples{
\dontrun{
sim <- BFDA.sim.ttest(d=0.5, n.min=20, n.max=300, boundary=Inf, 
			stepsize=1, design="sequential", B=1000, verbose=TRUE, cores=2)
save(sim, file="sim0.5.RData")
BFDA.analysis(sim)
BFDA.analysis(sim, boundary=6)
plot(sim, boundary=6)
plot(sim, boundary=6, n.max=80)
}
}

